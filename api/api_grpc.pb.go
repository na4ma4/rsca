// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: github.com/na4ma4/rsca/api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RSCAClient is the client API for RSCA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RSCAClient interface {
	Pipe(ctx context.Context, opts ...grpc.CallOption) (RSCA_PipeClient, error)
}

type rSCAClient struct {
	cc grpc.ClientConnInterface
}

func NewRSCAClient(cc grpc.ClientConnInterface) RSCAClient {
	return &rSCAClient{cc}
}

func (c *rSCAClient) Pipe(ctx context.Context, opts ...grpc.CallOption) (RSCA_PipeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RSCA_ServiceDesc.Streams[0], "/rsca.api.RSCA/Pipe", opts...)
	if err != nil {
		return nil, err
	}
	x := &rSCAPipeClient{stream}
	return x, nil
}

type RSCA_PipeClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type rSCAPipeClient struct {
	grpc.ClientStream
}

func (x *rSCAPipeClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rSCAPipeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RSCAServer is the server API for RSCA service.
// All implementations should embed UnimplementedRSCAServer
// for forward compatibility
type RSCAServer interface {
	Pipe(RSCA_PipeServer) error
}

// UnimplementedRSCAServer should be embedded to have forward compatible implementations.
type UnimplementedRSCAServer struct {
}

func (UnimplementedRSCAServer) Pipe(RSCA_PipeServer) error {
	return status.Errorf(codes.Unimplemented, "method Pipe not implemented")
}

// UnsafeRSCAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RSCAServer will
// result in compilation errors.
type UnsafeRSCAServer interface {
	mustEmbedUnimplementedRSCAServer()
}

func RegisterRSCAServer(s grpc.ServiceRegistrar, srv RSCAServer) {
	s.RegisterService(&RSCA_ServiceDesc, srv)
}

func _RSCA_Pipe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RSCAServer).Pipe(&rSCAPipeServer{stream})
}

type RSCA_PipeServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type rSCAPipeServer struct {
	grpc.ServerStream
}

func (x *rSCAPipeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rSCAPipeServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RSCA_ServiceDesc is the grpc.ServiceDesc for RSCA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RSCA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rsca.api.RSCA",
	HandlerType: (*RSCAServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pipe",
			Handler:       _RSCA_Pipe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/na4ma4/rsca/api/api.proto",
}
